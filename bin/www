#!/usr/bin/env node

/**
 * 主要目的：
 * 1、开始http的服务server
 * 2、连接数据库
 */

var app = require('../app');
var debug = require('debug')('express-sequelize');
var http = require('http');
var models = require('../models');

/**
 * 通过环境获取端口并设置端口.
 */

var port = normalizePort(process.env.PORT || '3003');
app.set('port', port);

/**
 * 创建 server.
 */
var server = http.createServer(app);

/**
 * 连接MySql数据库
 */
models.sequelize.sync().then(function () {
    server.listen(port, function () {
        debug('Express已启动，端口是: ' + server.address().port);
    });
    server.on('error', onError);
    server.on('listening', onListening);
});

/**
 * 格式化端口为一个： number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * 监听错误函数
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe: ' + port :
        'Port: ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * 开始监听函数
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('监听端口 ' + bind);
}
